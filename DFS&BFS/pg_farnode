#include <vector>
#include <queue>

using namespace std;

vector<int> nodes[20001];
int visited[20001];

// edge에 weight가 없으니 BFS 선택
int solution(int n, vector<vector<int>> edge) 
{
    // anssize = 가장 멀리 떨어진 노드의 간선 갯수
    int anssize = 0, answer = 0;

    // 연결된 노드 vector에 저장
    for (int i = 0; i < edge.size(); ++i)
    {
        nodes[edge[i][0]].push_back(edge[i][1]);
        nodes[edge[i][1]].push_back(edge[i][0]);
    }

    // 노드 번호, 간선 수 저장
    queue<pair<int, int>> q;
    q.push({ 1, 0 });
    visited[1] = 0;

    while (!q.empty())
    {
        int num = q.front().first;
        int cnt = q.front().second;
        q.pop();

        for (int i = 0; i < nodes[num].size(); ++i)
        {
            if (visited[nodes[num][i]] || nodes[num][i] == 1) continue;

            q.push({ nodes[num][i], cnt + 1 });
            visited[nodes[num][i]] = cnt + 1;

            anssize = anssize < cnt + 1 ? cnt + 1 : anssize;
        }
    }

    for (int i = 1; i < 20001; ++i)
        if (visited[i] == anssize) answer++;

    return answer;
}
